// Suppress linter warnings for autogenerated files.
#![allow(missing_docs, non_snake_case)]

use crate::xsd_rs::onvif_xsd as tt;
use serde_derive::{Deserialize, Serialize};
use yaserde_derive::{YaDeserialize, YaSerialize};

/// onvif API GetDeviceInformation
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
pub struct GetDeviceInformation {}

/// response of onvif API GetDeviceInformation
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize, Serialize, Deserialize)]
#[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
pub struct GetDeviceInformationResponse {
    /// The manufacturer of the device.
    #[yaserde(prefix = "tds", rename = "Manufacturer")]
    pub manufacturer: String,

    /// The device model.
    #[yaserde(prefix = "tds", rename = "Model")]
    pub model: String,

    /// The firmware version in the device.
    #[yaserde(prefix = "tds", rename = "FirmwareVersion")]
    pub firmware_version: String,

    /// The serial number of the device.
    #[yaserde(prefix = "tds", rename = "SerialNumber")]
    pub serial_number: String,

    /// The hardware ID of the device.
    #[yaserde(prefix = "tds", rename = "HardwareId")]
    pub hardware_id: String,
}

/// onvif API GetServices
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
pub struct GetServices {
    /// Indicates if the service capabilities (untyped) should be included in the
    /// response.
    #[yaserde(prefix = "tds", rename = "IncludeCapability")]
    pub include_capability: bool,
}

/// onvif API GetServices return response
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
pub struct GetServicesResponse {
    /// Each Service element contains information about one service.
    #[yaserde(prefix = "tds", rename = "Service")]
    pub service: Vec<Service>,
}

/// Struct that defines holds onvif service info
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
pub struct Service {
    /// Namespace of the service being described. This parameter allows to match
    /// the service capabilities to the service. Note that only one set of
    /// capabilities is supported per namespace.
    #[yaserde(prefix = "tds", rename = "Namespace")]
    pub namespace: String,

    /// The transport addresses where the service can be reached. The scheme and
    /// IP part shall match the one used in the request (i.e. the GetServices
    /// request).
    #[yaserde(prefix = "tds", rename = "XAddr")]
    pub x_addr: String,

    /// capabilities of the service
    #[yaserde(prefix = "tds", rename = "Capabilities")]
    pub capabilities: Option<service::CapabilitiesType>,

    /// The version of the service (not the ONVIF core spec version).
    #[yaserde(prefix = "tds", rename = "Version")]
    pub version: tt::OnvifVersion,
}

/// This module holds the dummy Capabilities. We may not use this field.
pub mod service {
    use super::*;

    /// dummy placeholder to make ser/deser happy
    #[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
    pub struct CapabilitiesType {}
}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
pub struct SystemReboot {}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tds", namespace = "tds: http://www.onvif.org/ver10/device/wsdl")]
pub struct SystemRebootResponse {
    /// Contains the reboot message sent by the device.
    #[yaserde(prefix = "tds", rename = "Message")]
    pub message: String,
}
