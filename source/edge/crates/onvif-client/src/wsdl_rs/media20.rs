// Suppress linter warnings for autogenerated files.
#![allow(missing_docs, non_snake_case)]

use crate::xsd_rs::onvif_xsd as tt;
use serde_derive::{Deserialize, Serialize};
use yaserde_derive::{YaDeserialize, YaSerialize};

//use ../../../ver10/schema/onvif.xsd  http://www.onvif.org/ver10/schema;
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct GetServiceCapabilities {}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct GetServiceCapabilitiesResponse {
    /// The capabilities for the media service is returned in the Capabilities
    /// element.
    #[yaserde(prefix = "tr2", rename = "Capabilities")]
    pub capabilities: Capabilities2,
}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct Capabilities2 {
    /// Media profile capabilities.
    #[yaserde(prefix = "tr2", rename = "ProfileCapabilities")]
    pub profile_capabilities: ProfileCapabilities,

    /// Streaming capabilities.
    #[yaserde(prefix = "tr2", rename = "StreamingCapabilities")]
    pub streaming_capabilities: StreamingCapabilities,

    /// Indicates if GetSnapshotUri is supported.
    #[yaserde(attribute, rename = "SnapshotUri")]
    pub snapshot_uri: Option<bool>,

    /// Indicates whether or not Rotation feature is supported.
    #[yaserde(attribute, rename = "Rotation")]
    pub rotation: Option<bool>,

    /// Indicates the support for changing video source mode.
    #[yaserde(attribute, rename = "VideoSourceMode")]
    pub video_source_mode: Option<bool>,

    /// Indicates if OSD is supported.
    #[yaserde(attribute, rename = "OSD")]
    pub osd: Option<bool>,

    /// Indicates the support for temporary osd text configuration.
    #[yaserde(attribute, rename = "TemporaryOSDText")]
    pub temporary_osd_text: Option<bool>,

    /// Indicates if Masking is supported.
    #[yaserde(attribute, rename = "Mask")]
    pub mask: Option<bool>,

    /// Indicates that privacy masks are only supported at the video source level
    /// and not the video source configuration level.
    /// If this is true any addition, deletion or change of a privacy mask done
    /// for one video source configuration will automatically be
    /// applied by the device to a corresponding privacy mask for all other video
    /// source configuration associated with the same video source.
    #[yaserde(attribute, rename = "SourceMask")]
    pub source_mask: Option<bool>,
}

// pub type Capabilities = Capabilities2;
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct ProfileCapabilities {
    /// Maximum number of profiles supported.
    #[yaserde(attribute, rename = "MaximumNumberOfProfiles")]
    pub maximum_number_of_profiles: Option<i32>,

    /// The configurations supported by the device as defined by
    /// tr2:ConfigurationEnumeration. The enumeration value "All" shall not be
    /// included in this list.
    #[yaserde(attribute, rename = "ConfigurationsSupported")]
    pub configurations_supported: Option<tt::StringAttrList>,
}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct StreamingCapabilities {
    /// Indicates support for live media streaming via RTSP.
    #[yaserde(attribute, rename = "RTSPStreaming")]
    pub rtsp_streaming: Option<bool>,

    /// Indicates support for RTP multicast.
    #[yaserde(attribute, rename = "RTPMulticast")]
    pub rtp_multicast: Option<bool>,

    /// Indicates support for RTP/RTSP/TCP.
    #[yaserde(attribute, rename = "RTP_RTSP_TCP")]
    pub rtp_rtsp_tcp: Option<bool>,

    /// Indicates support for non aggregate RTSP control.
    #[yaserde(attribute, rename = "NonAggregateControl")]
    pub non_aggregate_control: Option<bool>,

    /// If streaming over WebSocket is supported, this shall return the RTSP
    /// WebSocket URI as described in Streaming Specification Section 5.1.1.5.
    #[yaserde(attribute, rename = "RTSPWebSocketUri")]
    pub rtsp_web_socket_uri: Option<String>,

    /// Indicates support for non-RTSP controlled multicast streaming.
    #[yaserde(attribute, rename = "AutoStartMulticast")]
    pub auto_start_multicast: Option<bool>,

    /// Indicates support for live media streaming via RTSPS and SRTP.
    #[yaserde(attribute, rename = "SecureRTSPStreaming")]
    pub secure_rtsp_streaming: Option<bool>,
}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct GetConfiguration {
    /// Token of the requested configuration.
    #[yaserde(prefix = "tr2", rename = "ConfigurationToken")]
    pub configuration_token: Option<String>,

    /// Contains the token of an existing media profile the configurations shall
    /// be compatible with.
    #[yaserde(prefix = "tr2", rename = "ProfileToken")]
    pub profile_token: Option<String>,
}

/// Even though this is the same strucutre as GetConfiguration,
/// need to redefine with new name so that SOAP serializes the request correctly
#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct GetVideoEncoderConfigurations {
    /// Token of the requested configuration.
    #[yaserde(prefix = "tr2", rename = "ConfigurationToken")]
    pub configuration_token: Option<String>,

    /// Contains the token of an existing media profile the configurations shall
    /// be compatible with.
    #[yaserde(prefix = "tr2", rename = "ProfileToken")]
    pub profile_token: Option<String>,
}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize, Serialize, Deserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct GetVideoEncoderConfigurationsResponse {
    /// This element contains a list of video encoder configurations.
    #[yaserde(prefix = "tr2", rename = "Configurations")]
    pub configurations: Vec<tt::VideoEncoder2Configuration>,
}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct SetConfigurationResponse {}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct SetVideoEncoderConfiguration {
    /// Contains the modified video encoder configuration. The configuration
    /// shall exist in the device.
    #[yaserde(prefix = "tr2", rename = "Configuration")]
    pub configuration: tt::VideoEncoder2Configuration,
}

#[derive(Default, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tr2", namespace = "tr2: http://www.onvif.org/ver20/media/wsdl")]
pub struct SetVideoEncoderConfigurationResponse {}
