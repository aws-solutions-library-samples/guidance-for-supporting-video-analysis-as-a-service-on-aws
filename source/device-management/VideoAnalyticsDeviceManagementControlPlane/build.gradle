import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.3'
    id 'jacoco'
    // for packaging compiled dependencies in jar file
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.example'
version = '1.0-beta'


repositories {
    mavenCentral()
    mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir "$rootDir/../VideoAnalyticsDeviceManagementJavaClient/generated-src"
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    // AWS SDK BOM
    implementation platform('software.amazon.awssdk:bom:2.20.26')
    
    // AWS SDK dependencies
    implementation 'software.amazon.awssdk:sfn'
    implementation 'software.amazon.awssdk:dynamodb'
    implementation 'software.amazon.awssdk:dynamodb-enhanced'
    implementation 'software.amazon.awssdk:iot'
    implementation 'software.amazon.awssdk:iotdataplane'
    implementation 'software.amazon.awssdk:apache-client'
    
    // OpenAPI generated java client dependencies
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'com.squareup.okio:okio:3.9.1'
    implementation 'io.gsonfire:gson-fire:1.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'

    // Testing
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation 'com.github.stefanbirkner:system-rules:1.16.0'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'software.amazon.awssdk:dynamodb-enhanced:2.20.26'
    testImplementation 'com.fasterxml.jackson.core:jackson-core:2.12.7'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Logging dependencies
    implementation platform('org.apache.logging.log4j:log4j-bom:2.20.0')
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
    implementation 'org.apache.logging.log4j:log4j-layout-template-json:2.20.0'

    // JSON handling
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.json:json:20240303'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
    implementation 'com.github.wnameless.json:json-flattener:0.8.0'
    implementation 'com.github.fge:json-schema-validator:2.2.4'

    // Other dependencies
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.dagger:dagger-compiler:2.48'
    implementation 'com.google.auto:auto-common:1.2.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.48'

    // API Gateway dependencies
    implementation 'software.amazon.awssdk:apigateway:2.20.+' // For REST API Gateway
    implementation 'software.amazon.awssdk:apigatewayv2:2.20.+' // For HTTP/WebSocket API Gateway
}

shadowJar {
    archiveClassifier.set('')
    mergeServiceFiles()
    zip64 true    
    minimize() // This will remove unused classes
    // Exclude dependencies that are available in the Lambda runtime
    exclude 'org/apache/log4j/**'
    exclude 'org/apache/logging/log4j/**'
    exclude 'software/amazon/awssdk/**'
    outputs.upToDateWhen { false }
    dependsOn classes  // Ensure Java compilation happens first
}


/**
 * Copies the built JAR file to the lambda deployment assets directory.
 * The JAR file is copied from the build directory to a centralized assets location
 * that is used by the CDK deployment stack.
 *
 * This task depends on the shadowJar task to ensure the JAR is built before copying.
 * The task will always run regardless of whether inputs have changed.
 */
task transformJarToDeploymentAsset(type: Copy) {
    description = 'Copies the built JAR file to the lambda deployment assets directory'
    from "${buildDir}/libs/${rootProject.name}-${version}.jar"
    into "../../../assets/lambda-built/device-management-assets"
    outputs.upToDateWhen { false }
    dependsOn shadowJar  // Ensure jar is created before copying
    
    doLast {
        println "JAR file copied from: ${buildDir}/libs/${rootProject.name}-${version}.jar"
        println "JAR file copied to: ../../../assets/lambda-built/device-management-assets"
    }
}

build {
    dependsOn shadowJar
     // Ensure Java compilation happens
    dependsOn classes 
    finalizedBy transformJarToDeploymentAsset
}

test {
    environment "JDK_JAVA_OPTIONS", "--add-opens java.base/java.util=ALL-UNNAMED"
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport  
}

jacocoTestReport {
    dependsOn test

    // excluding classes generated by OpenAPI
     afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "com/amazonaws/videoanalytics/devicemanagement/*.class",
                "com/amazonaws/videoanalytics/auth/*.class",
                "com/amazonaws/videoanalytics/*.class"
            ])
        }))
    }

    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file('reports/jacocoXml/jacoco.xml')
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

task cleanBuildCache {
    doLast {
        delete layout.buildDirectory

        delete fileTree(dir: "${System.getProperty('user.home')}/.gradle/caches")
        delete fileTree(dir: "${System.getProperty('user.home')}/.gradle/daemon")
        delete fileTree(dir: "${System.getProperty('user.home')}/.gradle/wrapper")

        // Delete the .gradle directory in the project root, if it exists
        def projectGradleDir = new File(projectDir, '.gradle')
        if (projectGradleDir.exists()) {
            println "Deleting project's .gradle directory..."
            projectGradleDir.deleteDir()
            println "Project's .gradle directory deleted successfully."
        }

        println "Build cache cleaning completed."
    }
}

configurations.all {
    resolutionStrategy {
        force 'software.amazon.awssdk:sfn:2.20.26'
        force 'software.amazon.awssdk:bom:2.20.26'
    }
}

