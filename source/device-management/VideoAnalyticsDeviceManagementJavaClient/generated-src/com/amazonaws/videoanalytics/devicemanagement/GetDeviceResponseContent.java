/*
 * Video Analytic Guidance Solution - Device Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-10-18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.amazonaws.videoanalytics.devicemanagement;

import java.util.Objects;
import com.amazonaws.videoanalytics.devicemanagement.DeviceMetaData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.amazonaws.videoanalytics.JSON;

/**
 * GetDeviceResponseContent
 */
@lombok.Builder
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-01T14:43:28.076578-05:00[America/Chicago]", comments = "Generator version: 7.8.0")
public class GetDeviceResponseContent {
  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_GROUP_IDS = "deviceGroupIds";
  @SerializedName(SERIALIZED_NAME_DEVICE_GROUP_IDS)
  private List<String> deviceGroupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_DEVICE_META_DATA = "deviceMetaData";
  @SerializedName(SERIALIZED_NAME_DEVICE_META_DATA)
  private DeviceMetaData deviceMetaData;

  public static final String SERIALIZED_NAME_DEVICE_CAPABILITIES = "deviceCapabilities";
  @SerializedName(SERIALIZED_NAME_DEVICE_CAPABILITIES)
  private Map<String, String> deviceCapabilities = new HashMap<>();

  public static final String SERIALIZED_NAME_DEVICE_SETTINGS = "deviceSettings";
  @SerializedName(SERIALIZED_NAME_DEVICE_SETTINGS)
  private Map<String, String> deviceSettings = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Date createdAt;

  public GetDeviceResponseContent() {
  }

  public GetDeviceResponseContent deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public GetDeviceResponseContent deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public GetDeviceResponseContent deviceGroupIds(List<String> deviceGroupIds) {
    this.deviceGroupIds = deviceGroupIds;
    return this;
  }

  public GetDeviceResponseContent addDeviceGroupIdsItem(String deviceGroupIdsItem) {
    if (this.deviceGroupIds == null) {
      this.deviceGroupIds = new ArrayList<>();
    }
    this.deviceGroupIds.add(deviceGroupIdsItem);
    return this;
  }

  /**
   * Get deviceGroupIds
   * @return deviceGroupIds
   */
  @javax.annotation.Nullable
  public List<String> getDeviceGroupIds() {
    return deviceGroupIds;
  }

  public void setDeviceGroupIds(List<String> deviceGroupIds) {
    this.deviceGroupIds = deviceGroupIds;
  }


  public GetDeviceResponseContent deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public GetDeviceResponseContent deviceMetaData(DeviceMetaData deviceMetaData) {
    this.deviceMetaData = deviceMetaData;
    return this;
  }

  /**
   * Get deviceMetaData
   * @return deviceMetaData
   */
  @javax.annotation.Nullable
  public DeviceMetaData getDeviceMetaData() {
    return deviceMetaData;
  }

  public void setDeviceMetaData(DeviceMetaData deviceMetaData) {
    this.deviceMetaData = deviceMetaData;
  }


  public GetDeviceResponseContent deviceCapabilities(Map<String, String> deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
    return this;
  }

  public GetDeviceResponseContent putDeviceCapabilitiesItem(String key, String deviceCapabilitiesItem) {
    if (this.deviceCapabilities == null) {
      this.deviceCapabilities = new HashMap<>();
    }
    this.deviceCapabilities.put(key, deviceCapabilitiesItem);
    return this;
  }

  /**
   * Get deviceCapabilities
   * @return deviceCapabilities
   */
  @javax.annotation.Nullable
  public Map<String, String> getDeviceCapabilities() {
    return deviceCapabilities;
  }

  public void setDeviceCapabilities(Map<String, String> deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
  }


  public GetDeviceResponseContent deviceSettings(Map<String, String> deviceSettings) {
    this.deviceSettings = deviceSettings;
    return this;
  }

  public GetDeviceResponseContent putDeviceSettingsItem(String key, String deviceSettingsItem) {
    if (this.deviceSettings == null) {
      this.deviceSettings = new HashMap<>();
    }
    this.deviceSettings.put(key, deviceSettingsItem);
    return this;
  }

  /**
   * Get deviceSettings
   * @return deviceSettings
   */
  @javax.annotation.Nullable
  public Map<String, String> getDeviceSettings() {
    return deviceSettings;
  }

  public void setDeviceSettings(Map<String, String> deviceSettings) {
    this.deviceSettings = deviceSettings;
  }


  public GetDeviceResponseContent createdAt(Date createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceResponseContent getDeviceResponseContent = (GetDeviceResponseContent) o;
    return Objects.equals(this.deviceName, getDeviceResponseContent.deviceName) &&
        Objects.equals(this.deviceId, getDeviceResponseContent.deviceId) &&
        Objects.equals(this.deviceGroupIds, getDeviceResponseContent.deviceGroupIds) &&
        Objects.equals(this.deviceType, getDeviceResponseContent.deviceType) &&
        Objects.equals(this.deviceMetaData, getDeviceResponseContent.deviceMetaData) &&
        Objects.equals(this.deviceCapabilities, getDeviceResponseContent.deviceCapabilities) &&
        Objects.equals(this.deviceSettings, getDeviceResponseContent.deviceSettings) &&
        Objects.equals(this.createdAt, getDeviceResponseContent.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceName, deviceId, deviceGroupIds, deviceType, deviceMetaData, deviceCapabilities, deviceSettings, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceResponseContent {\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceGroupIds: ").append(toIndentedString(deviceGroupIds)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    deviceMetaData: ").append(toIndentedString(deviceMetaData)).append("\n");
    sb.append("    deviceCapabilities: ").append(toIndentedString(deviceCapabilities)).append("\n");
    sb.append("    deviceSettings: ").append(toIndentedString(deviceSettings)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceName");
    openapiFields.add("deviceId");
    openapiFields.add("deviceGroupIds");
    openapiFields.add("deviceType");
    openapiFields.add("deviceMetaData");
    openapiFields.add("deviceCapabilities");
    openapiFields.add("deviceSettings");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceResponseContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceResponseContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceResponseContent is not found in the empty JSON string", GetDeviceResponseContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceResponseContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceResponseContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) && !jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deviceGroupIds") != null && !jsonObj.get("deviceGroupIds").isJsonNull() && !jsonObj.get("deviceGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("deviceGroupIds").toString()));
      }
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      // validate the optional field `deviceMetaData`
      if (jsonObj.get("deviceMetaData") != null && !jsonObj.get("deviceMetaData").isJsonNull()) {
        DeviceMetaData.validateJsonElement(jsonObj.get("deviceMetaData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceResponseContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceResponseContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceResponseContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceResponseContent.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceResponseContent>() {
           @Override
           public void write(JsonWriter out, GetDeviceResponseContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceResponseContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceResponseContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceResponseContent
   * @throws IOException if the JSON string is invalid with respect to GetDeviceResponseContent
   */
  public static GetDeviceResponseContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceResponseContent.class);
  }

  /**
   * Convert an instance of GetDeviceResponseContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

