/*
 * Video Analytic Guidance Solution - Device Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-10-18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.amazonaws.videoanalytics.devicemanagement;

import java.util.Objects;
import com.amazonaws.videoanalytics.devicemanagement.AiEvent;
import com.amazonaws.videoanalytics.devicemanagement.ConnectivityStatus;
import com.amazonaws.videoanalytics.devicemanagement.DeviceState;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.amazonaws.videoanalytics.JSON;

/**
 * Condition
 */
@lombok.Builder
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-30T16:36:00.824109-05:00[America/Chicago]", comments = "Generator version: 7.8.0")
public class Condition {
  public static final String SERIALIZED_NAME_CONNECTIVITY_STATUS = "connectivityStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY_STATUS)
  private Set<ConnectivityStatus> connectivityStatus = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Set<DeviceState> state = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_AI_EVENT = "aiEvent";
  @SerializedName(SERIALIZED_NAME_AI_EVENT)
  private Set<AiEvent> aiEvent = new LinkedHashSet<>();

  public Condition() {
  }

  public Condition connectivityStatus(Set<ConnectivityStatus> connectivityStatus) {
    this.connectivityStatus = connectivityStatus;
    return this;
  }

  public Condition addConnectivityStatusItem(ConnectivityStatus connectivityStatusItem) {
    if (this.connectivityStatus == null) {
      this.connectivityStatus = new LinkedHashSet<>();
    }
    this.connectivityStatus.add(connectivityStatusItem);
    return this;
  }

  /**
   * Get connectivityStatus
   * @return connectivityStatus
   */
  @javax.annotation.Nullable
  public Set<ConnectivityStatus> getConnectivityStatus() {
    return connectivityStatus;
  }

  public void setConnectivityStatus(Set<ConnectivityStatus> connectivityStatus) {
    this.connectivityStatus = connectivityStatus;
  }


  public Condition state(Set<DeviceState> state) {
    this.state = state;
    return this;
  }

  public Condition addStateItem(DeviceState stateItem) {
    if (this.state == null) {
      this.state = new LinkedHashSet<>();
    }
    this.state.add(stateItem);
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public Set<DeviceState> getState() {
    return state;
  }

  public void setState(Set<DeviceState> state) {
    this.state = state;
  }


  public Condition aiEvent(Set<AiEvent> aiEvent) {
    this.aiEvent = aiEvent;
    return this;
  }

  public Condition addAiEventItem(AiEvent aiEventItem) {
    if (this.aiEvent == null) {
      this.aiEvent = new LinkedHashSet<>();
    }
    this.aiEvent.add(aiEventItem);
    return this;
  }

  /**
   * Get aiEvent
   * @return aiEvent
   */
  @javax.annotation.Nullable
  public Set<AiEvent> getAiEvent() {
    return aiEvent;
  }

  public void setAiEvent(Set<AiEvent> aiEvent) {
    this.aiEvent = aiEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Condition condition = (Condition) o;
    return Objects.equals(this.connectivityStatus, condition.connectivityStatus) &&
        Objects.equals(this.state, condition.state) &&
        Objects.equals(this.aiEvent, condition.aiEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectivityStatus, state, aiEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Condition {\n");
    sb.append("    connectivityStatus: ").append(toIndentedString(connectivityStatus)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    aiEvent: ").append(toIndentedString(aiEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectivityStatus");
    openapiFields.add("state");
    openapiFields.add("aiEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Condition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Condition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Condition is not found in the empty JSON string", Condition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Condition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Condition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("connectivityStatus") != null && !jsonObj.get("connectivityStatus").isJsonNull() && !jsonObj.get("connectivityStatus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectivityStatus` to be an array in the JSON string but got `%s`", jsonObj.get("connectivityStatus").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull() && !jsonObj.get("state").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be an array in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aiEvent") != null && !jsonObj.get("aiEvent").isJsonNull() && !jsonObj.get("aiEvent").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiEvent` to be an array in the JSON string but got `%s`", jsonObj.get("aiEvent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Condition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Condition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Condition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Condition.class));

       return (TypeAdapter<T>) new TypeAdapter<Condition>() {
           @Override
           public void write(JsonWriter out, Condition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Condition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Condition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Condition
   * @throws IOException if the JSON string is invalid with respect to Condition
   */
  public static Condition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Condition.class);
  }

  /**
   * Convert an instance of Condition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

