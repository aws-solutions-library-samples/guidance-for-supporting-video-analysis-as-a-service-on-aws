/*
 * Video Analytic Guidance Solution - Device Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-10-18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.amazonaws.videoanalytics.devicemanagement;

import java.util.Objects;
import com.amazonaws.videoanalytics.devicemanagement.CloudVideoStreamingElement;
import com.amazonaws.videoanalytics.devicemanagement.DeviceConnection;
import com.amazonaws.videoanalytics.devicemanagement.DeviceState;
import com.amazonaws.videoanalytics.devicemanagement.StorageElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.amazonaws.videoanalytics.JSON;

/**
 * DeviceStatus
 */
@lombok.Builder
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class DeviceStatus {
  public static final String SERIALIZED_NAME_DEVICE_STATE = "deviceState";
  @SerializedName(SERIALIZED_NAME_DEVICE_STATE)
  private DeviceState deviceState;

  public static final String SERIALIZED_NAME_DEVICE_CONNECTION = "deviceConnection";
  @SerializedName(SERIALIZED_NAME_DEVICE_CONNECTION)
  private DeviceConnection deviceConnection;

  public static final String SERIALIZED_NAME_CLOUD_VIDEO_STREAMING = "cloudVideoStreaming";
  @SerializedName(SERIALIZED_NAME_CLOUD_VIDEO_STREAMING)
  private List<CloudVideoStreamingElement> cloudVideoStreaming = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private List<StorageElement> storage = new ArrayList<>();

  public DeviceStatus() {
  }

  public DeviceStatus deviceState(DeviceState deviceState) {
    this.deviceState = deviceState;
    return this;
  }

  /**
   * Get deviceState
   * @return deviceState
   */
  @javax.annotation.Nullable
  public DeviceState getDeviceState() {
    return deviceState;
  }

  public void setDeviceState(DeviceState deviceState) {
    this.deviceState = deviceState;
  }


  public DeviceStatus deviceConnection(DeviceConnection deviceConnection) {
    this.deviceConnection = deviceConnection;
    return this;
  }

  /**
   * Get deviceConnection
   * @return deviceConnection
   */
  @javax.annotation.Nullable
  public DeviceConnection getDeviceConnection() {
    return deviceConnection;
  }

  public void setDeviceConnection(DeviceConnection deviceConnection) {
    this.deviceConnection = deviceConnection;
  }


  public DeviceStatus cloudVideoStreaming(List<CloudVideoStreamingElement> cloudVideoStreaming) {
    this.cloudVideoStreaming = cloudVideoStreaming;
    return this;
  }

  public DeviceStatus addCloudVideoStreamingItem(CloudVideoStreamingElement cloudVideoStreamingItem) {
    if (this.cloudVideoStreaming == null) {
      this.cloudVideoStreaming = new ArrayList<>();
    }
    this.cloudVideoStreaming.add(cloudVideoStreamingItem);
    return this;
  }

  /**
   * Get cloudVideoStreaming
   * @return cloudVideoStreaming
   */
  @javax.annotation.Nullable
  public List<CloudVideoStreamingElement> getCloudVideoStreaming() {
    return cloudVideoStreaming;
  }

  public void setCloudVideoStreaming(List<CloudVideoStreamingElement> cloudVideoStreaming) {
    this.cloudVideoStreaming = cloudVideoStreaming;
  }


  public DeviceStatus storage(List<StorageElement> storage) {
    this.storage = storage;
    return this;
  }

  public DeviceStatus addStorageItem(StorageElement storageItem) {
    if (this.storage == null) {
      this.storage = new ArrayList<>();
    }
    this.storage.add(storageItem);
    return this;
  }

  /**
   * Get storage
   * @return storage
   */
  @javax.annotation.Nullable
  public List<StorageElement> getStorage() {
    return storage;
  }

  public void setStorage(List<StorageElement> storage) {
    this.storage = storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceStatus deviceStatus = (DeviceStatus) o;
    return Objects.equals(this.deviceState, deviceStatus.deviceState) &&
        Objects.equals(this.deviceConnection, deviceStatus.deviceConnection) &&
        Objects.equals(this.cloudVideoStreaming, deviceStatus.cloudVideoStreaming) &&
        Objects.equals(this.storage, deviceStatus.storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceState, deviceConnection, cloudVideoStreaming, storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceStatus {\n");
    sb.append("    deviceState: ").append(toIndentedString(deviceState)).append("\n");
    sb.append("    deviceConnection: ").append(toIndentedString(deviceConnection)).append("\n");
    sb.append("    cloudVideoStreaming: ").append(toIndentedString(cloudVideoStreaming)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceState");
    openapiFields.add("deviceConnection");
    openapiFields.add("cloudVideoStreaming");
    openapiFields.add("storage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceStatus is not found in the empty JSON string", DeviceStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deviceState`
      if (jsonObj.get("deviceState") != null && !jsonObj.get("deviceState").isJsonNull()) {
        DeviceState.validateJsonElement(jsonObj.get("deviceState"));
      }
      // validate the optional field `deviceConnection`
      if (jsonObj.get("deviceConnection") != null && !jsonObj.get("deviceConnection").isJsonNull()) {
        DeviceConnection.validateJsonElement(jsonObj.get("deviceConnection"));
      }
      if (jsonObj.get("cloudVideoStreaming") != null && !jsonObj.get("cloudVideoStreaming").isJsonNull()) {
        JsonArray jsonArraycloudVideoStreaming = jsonObj.getAsJsonArray("cloudVideoStreaming");
        if (jsonArraycloudVideoStreaming != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cloudVideoStreaming").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cloudVideoStreaming` to be an array in the JSON string but got `%s`", jsonObj.get("cloudVideoStreaming").toString()));
          }

          // validate the optional field `cloudVideoStreaming` (array)
          for (int i = 0; i < jsonArraycloudVideoStreaming.size(); i++) {
            CloudVideoStreamingElement.validateJsonElement(jsonArraycloudVideoStreaming.get(i));
          };
        }
      }
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        JsonArray jsonArraystorage = jsonObj.getAsJsonArray("storage");
        if (jsonArraystorage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage` to be an array in the JSON string but got `%s`", jsonObj.get("storage").toString()));
          }

          // validate the optional field `storage` (array)
          for (int i = 0; i < jsonArraystorage.size(); i++) {
            StorageElement.validateJsonElement(jsonArraystorage.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceStatus>() {
           @Override
           public void write(JsonWriter out, DeviceStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceStatus
   * @throws IOException if the JSON string is invalid with respect to DeviceStatus
   */
  public static DeviceStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceStatus.class);
  }

  /**
   * Convert an instance of DeviceStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

