/*
 * Video Analytic Guidance Solution - Device Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-10-18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.amazonaws.videoanalytics.devicemanagement;

import java.util.Objects;
import com.amazonaws.videoanalytics.devicemanagement.CommandPayload;
import com.amazonaws.videoanalytics.devicemanagement.DeviceGroupPayload;
import com.amazonaws.videoanalytics.devicemanagement.DeviceState;
import com.amazonaws.videoanalytics.devicemanagement.DeviceTypePayload;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.amazonaws.videoanalytics.JSON;

/**
 * StartUpdateDeviceRequestContent
 */
@lombok.Builder
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-30T16:36:00.824109-05:00[America/Chicago]", comments = "Generator version: 7.8.0")
public class StartUpdateDeviceRequestContent {
  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_NEW_DEVICE_STATE = "newDeviceState";
  @SerializedName(SERIALIZED_NAME_NEW_DEVICE_STATE)
  private DeviceState newDeviceState;

  public static final String SERIALIZED_NAME_DEVICE_GROUP_PAYLOAD = "deviceGroupPayload";
  @SerializedName(SERIALIZED_NAME_DEVICE_GROUP_PAYLOAD)
  private DeviceGroupPayload deviceGroupPayload;

  public static final String SERIALIZED_NAME_DEVICE_TYPE_PAYLOAD = "deviceTypePayload";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE_PAYLOAD)
  private DeviceTypePayload deviceTypePayload;

  public static final String SERIALIZED_NAME_CONFIGURATION_PAYLOAD = "configurationPayload";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_PAYLOAD)
  private Object configurationPayload = null;

  public static final String SERIALIZED_NAME_COMMAND_PAYLOAD = "commandPayload";
  @SerializedName(SERIALIZED_NAME_COMMAND_PAYLOAD)
  private CommandPayload commandPayload;

  public StartUpdateDeviceRequestContent() {
  }

  public StartUpdateDeviceRequestContent deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nonnull
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public StartUpdateDeviceRequestContent newDeviceState(DeviceState newDeviceState) {
    this.newDeviceState = newDeviceState;
    return this;
  }

  /**
   * Get newDeviceState
   * @return newDeviceState
   */
  @javax.annotation.Nullable
  public DeviceState getNewDeviceState() {
    return newDeviceState;
  }

  public void setNewDeviceState(DeviceState newDeviceState) {
    this.newDeviceState = newDeviceState;
  }


  public StartUpdateDeviceRequestContent deviceGroupPayload(DeviceGroupPayload deviceGroupPayload) {
    this.deviceGroupPayload = deviceGroupPayload;
    return this;
  }

  /**
   * Get deviceGroupPayload
   * @return deviceGroupPayload
   */
  @javax.annotation.Nullable
  public DeviceGroupPayload getDeviceGroupPayload() {
    return deviceGroupPayload;
  }

  public void setDeviceGroupPayload(DeviceGroupPayload deviceGroupPayload) {
    this.deviceGroupPayload = deviceGroupPayload;
  }


  public StartUpdateDeviceRequestContent deviceTypePayload(DeviceTypePayload deviceTypePayload) {
    this.deviceTypePayload = deviceTypePayload;
    return this;
  }

  /**
   * Get deviceTypePayload
   * @return deviceTypePayload
   */
  @javax.annotation.Nullable
  public DeviceTypePayload getDeviceTypePayload() {
    return deviceTypePayload;
  }

  public void setDeviceTypePayload(DeviceTypePayload deviceTypePayload) {
    this.deviceTypePayload = deviceTypePayload;
  }


  public StartUpdateDeviceRequestContent configurationPayload(Object configurationPayload) {
    this.configurationPayload = configurationPayload;
    return this;
  }

  /**
   * Get configurationPayload
   * @return configurationPayload
   */
  @javax.annotation.Nullable
  public Object getConfigurationPayload() {
    return configurationPayload;
  }

  public void setConfigurationPayload(Object configurationPayload) {
    this.configurationPayload = configurationPayload;
  }


  public StartUpdateDeviceRequestContent commandPayload(CommandPayload commandPayload) {
    this.commandPayload = commandPayload;
    return this;
  }

  /**
   * Get commandPayload
   * @return commandPayload
   */
  @javax.annotation.Nullable
  public CommandPayload getCommandPayload() {
    return commandPayload;
  }

  public void setCommandPayload(CommandPayload commandPayload) {
    this.commandPayload = commandPayload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartUpdateDeviceRequestContent startUpdateDeviceRequestContent = (StartUpdateDeviceRequestContent) o;
    return Objects.equals(this.deviceId, startUpdateDeviceRequestContent.deviceId) &&
        Objects.equals(this.newDeviceState, startUpdateDeviceRequestContent.newDeviceState) &&
        Objects.equals(this.deviceGroupPayload, startUpdateDeviceRequestContent.deviceGroupPayload) &&
        Objects.equals(this.deviceTypePayload, startUpdateDeviceRequestContent.deviceTypePayload) &&
        Objects.equals(this.configurationPayload, startUpdateDeviceRequestContent.configurationPayload) &&
        Objects.equals(this.commandPayload, startUpdateDeviceRequestContent.commandPayload);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, newDeviceState, deviceGroupPayload, deviceTypePayload, configurationPayload, commandPayload);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartUpdateDeviceRequestContent {\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    newDeviceState: ").append(toIndentedString(newDeviceState)).append("\n");
    sb.append("    deviceGroupPayload: ").append(toIndentedString(deviceGroupPayload)).append("\n");
    sb.append("    deviceTypePayload: ").append(toIndentedString(deviceTypePayload)).append("\n");
    sb.append("    configurationPayload: ").append(toIndentedString(configurationPayload)).append("\n");
    sb.append("    commandPayload: ").append(toIndentedString(commandPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceId");
    openapiFields.add("newDeviceState");
    openapiFields.add("deviceGroupPayload");
    openapiFields.add("deviceTypePayload");
    openapiFields.add("configurationPayload");
    openapiFields.add("commandPayload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deviceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartUpdateDeviceRequestContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartUpdateDeviceRequestContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartUpdateDeviceRequestContent is not found in the empty JSON string", StartUpdateDeviceRequestContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartUpdateDeviceRequestContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartUpdateDeviceRequestContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartUpdateDeviceRequestContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      // validate the optional field `newDeviceState`
      if (jsonObj.get("newDeviceState") != null && !jsonObj.get("newDeviceState").isJsonNull()) {
        DeviceState.validateJsonElement(jsonObj.get("newDeviceState"));
      }
      // validate the optional field `deviceGroupPayload`
      if (jsonObj.get("deviceGroupPayload") != null && !jsonObj.get("deviceGroupPayload").isJsonNull()) {
        DeviceGroupPayload.validateJsonElement(jsonObj.get("deviceGroupPayload"));
      }
      // validate the optional field `deviceTypePayload`
      if (jsonObj.get("deviceTypePayload") != null && !jsonObj.get("deviceTypePayload").isJsonNull()) {
        DeviceTypePayload.validateJsonElement(jsonObj.get("deviceTypePayload"));
      }
      // validate the optional field `commandPayload`
      if (jsonObj.get("commandPayload") != null && !jsonObj.get("commandPayload").isJsonNull()) {
        CommandPayload.validateJsonElement(jsonObj.get("commandPayload"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartUpdateDeviceRequestContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartUpdateDeviceRequestContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartUpdateDeviceRequestContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartUpdateDeviceRequestContent.class));

       return (TypeAdapter<T>) new TypeAdapter<StartUpdateDeviceRequestContent>() {
           @Override
           public void write(JsonWriter out, StartUpdateDeviceRequestContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartUpdateDeviceRequestContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartUpdateDeviceRequestContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartUpdateDeviceRequestContent
   * @throws IOException if the JSON string is invalid with respect to StartUpdateDeviceRequestContent
   */
  public static StartUpdateDeviceRequestContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartUpdateDeviceRequestContent.class);
  }

  /**
   * Convert an instance of StartUpdateDeviceRequestContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

