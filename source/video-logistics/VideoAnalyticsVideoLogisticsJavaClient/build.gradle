plugins {
    id "org.openapi.generator" version "7.8.0"
}

group = 'org.example'
version = '1.0-beta'

openApiGenerate {
    delete "$rootDir/generated-src/"
    validateSpec = true
    generatorName = "java"
    inputSpec = "$rootDir/../../../assets/model/video-logistics/openapi-conversion/openapi/VideoAnalytic.openapi.json"
    cleanupOutput = true
    outputDir = "$buildDir/generated"
    modelPackage = "com.amazonaws.videoanalytics.videologistics"
    configOptions = [
            "additionalModelTypeAnnotations": "@lombok.Builder;@lombok.AllArgsConstructor",
            "dateLibrary": "legacy"
    ]

    copy {
        from "$buildDir/generated/src/main/java"
        into "$rootDir/generated-src/"
        include 'com/amazonaws/**/*.java'
        include 'com/amazonaws/*.java'
    }
}

task cleanBuildCache {
    doLast {
        delete layout.buildDirectory

        delete fileTree(dir: "${System.getProperty('user.home')}/.gradle/caches")
        delete fileTree(dir: "${System.getProperty('user.home')}/.gradle/daemon")
        delete fileTree(dir: "${System.getProperty('user.home')}/.gradle/wrapper")

        // Delete the .gradle directory in the project root, if it exists
        def projectGradleDir = new File(projectDir, '.gradle')
        if (projectGradleDir.exists()) {
            println "Deleting project's .gradle directory..."
            projectGradleDir.deleteDir()
            println "Project's .gradle directory deleted successfully."
        }

        println "Build cache cleaning completed."
    }
}
