/*
 * Video Analytic Guidance Solution - Video Logistics
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-10-18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.amazonaws.videoanalytics.videologistics;

import java.util.Objects;
import com.amazonaws.videoanalytics.videologistics.IceServer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.amazonaws.videoanalytics.JSON;

/**
 * CreateLivestreamSessionResponseContent
 */
@lombok.Builder
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class CreateLivestreamSessionResponseContent {
  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_ICE_SERVERS = "iceServers";
  @SerializedName(SERIALIZED_NAME_ICE_SERVERS)
  private List<IceServer> iceServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNALING_CHANNEL_U_R_L = "signalingChannelURL";
  @SerializedName(SERIALIZED_NAME_SIGNALING_CHANNEL_U_R_L)
  private String signalingChannelURL;

  public CreateLivestreamSessionResponseContent() {
  }

  public CreateLivestreamSessionResponseContent sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public CreateLivestreamSessionResponseContent clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public CreateLivestreamSessionResponseContent iceServers(List<IceServer> iceServers) {
    this.iceServers = iceServers;
    return this;
  }

  public CreateLivestreamSessionResponseContent addIceServersItem(IceServer iceServersItem) {
    if (this.iceServers == null) {
      this.iceServers = new ArrayList<>();
    }
    this.iceServers.add(iceServersItem);
    return this;
  }

  /**
   * Get iceServers
   * @return iceServers
   */
  @javax.annotation.Nullable
  public List<IceServer> getIceServers() {
    return iceServers;
  }

  public void setIceServers(List<IceServer> iceServers) {
    this.iceServers = iceServers;
  }


  public CreateLivestreamSessionResponseContent signalingChannelURL(String signalingChannelURL) {
    this.signalingChannelURL = signalingChannelURL;
    return this;
  }

  /**
   * Get signalingChannelURL
   * @return signalingChannelURL
   */
  @javax.annotation.Nullable
  public String getSignalingChannelURL() {
    return signalingChannelURL;
  }

  public void setSignalingChannelURL(String signalingChannelURL) {
    this.signalingChannelURL = signalingChannelURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLivestreamSessionResponseContent createLivestreamSessionResponseContent = (CreateLivestreamSessionResponseContent) o;
    return Objects.equals(this.sessionId, createLivestreamSessionResponseContent.sessionId) &&
        Objects.equals(this.clientId, createLivestreamSessionResponseContent.clientId) &&
        Objects.equals(this.iceServers, createLivestreamSessionResponseContent.iceServers) &&
        Objects.equals(this.signalingChannelURL, createLivestreamSessionResponseContent.signalingChannelURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionId, clientId, iceServers, signalingChannelURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLivestreamSessionResponseContent {\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    iceServers: ").append(toIndentedString(iceServers)).append("\n");
    sb.append("    signalingChannelURL: ").append(toIndentedString(signalingChannelURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sessionId");
    openapiFields.add("clientId");
    openapiFields.add("iceServers");
    openapiFields.add("signalingChannelURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLivestreamSessionResponseContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLivestreamSessionResponseContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLivestreamSessionResponseContent is not found in the empty JSON string", CreateLivestreamSessionResponseContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLivestreamSessionResponseContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLivestreamSessionResponseContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (jsonObj.get("iceServers") != null && !jsonObj.get("iceServers").isJsonNull()) {
        JsonArray jsonArrayiceServers = jsonObj.getAsJsonArray("iceServers");
        if (jsonArrayiceServers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("iceServers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `iceServers` to be an array in the JSON string but got `%s`", jsonObj.get("iceServers").toString()));
          }

          // validate the optional field `iceServers` (array)
          for (int i = 0; i < jsonArrayiceServers.size(); i++) {
            IceServer.validateJsonElement(jsonArrayiceServers.get(i));
          };
        }
      }
      if ((jsonObj.get("signalingChannelURL") != null && !jsonObj.get("signalingChannelURL").isJsonNull()) && !jsonObj.get("signalingChannelURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalingChannelURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalingChannelURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLivestreamSessionResponseContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLivestreamSessionResponseContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLivestreamSessionResponseContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLivestreamSessionResponseContent.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLivestreamSessionResponseContent>() {
           @Override
           public void write(JsonWriter out, CreateLivestreamSessionResponseContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLivestreamSessionResponseContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLivestreamSessionResponseContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLivestreamSessionResponseContent
   * @throws IOException if the JSON string is invalid with respect to CreateLivestreamSessionResponseContent
   */
  public static CreateLivestreamSessionResponseContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLivestreamSessionResponseContent.class);
  }

  /**
   * Convert an instance of CreateLivestreamSessionResponseContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

